/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var aug_s15540 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,2],$V1=[23,25,30,49,50,51,62,63],$V2=[1,9],$V3=[1,10],$V4=[1,11],$V5=[1,12],$V6=[1,13],$V7=[1,14],$V8=[7,19],$V9=[2,31],$Va=[1,20],$Vb=[1,34],$Vc=[1,33],$Vd=[1,18],$Ve=[1,19],$Vf=[1,21],$Vg=[1,22],$Vh=[1,23],$Vi=[1,24],$Vj=[1,25],$Vk=[1,26],$Vl=[1,27],$Vm=[1,28],$Vn=[1,30],$Vo=[1,29],$Vp=[1,31],$Vq=[1,32],$Vr=[7,12,13,15,19,20,21,22,25,30,35,36,38,43,45,46,52,53,54,55,56,57,58,59,60,61,62,64,66,67],$Vs=[1,35],$Vt=[2,32],$Vu=[1,42],$Vv=[1,44],$Vw=[7,12,13,15,19,22,35,38,43,45,46,48],$Vx=[7,12,13,15,19,20,21,22,30,35,36,38,43,45,46],$Vy=[12,15,22],$Vz=[1,68],$VA=[12,13,15,19,22,35],$VB=[1,71],$VC=[1,73],$VD=[1,74],$VE=[1,75],$VF=[12,13,15,19,22,35,38,43,45,46],$VG=[12,13,15,19,22,35,38,43,45,46,48],$VH=[12,22],$VI=[38,44],$VJ=[2,46],$VK=[1,114],$VL=[1,128],$VM=[12,19,22],$VN=[2,8],$VO=[1,130],$VP=[1,131];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"select_stmt":3,"SELECT":4,"select_opts":5,"select_expr_list":6,"FROM":7,"table_references":8,"opt_where":9,"opt_groupby":10,"opt_orderby":11,"SEMICOLON":12,"WHERE":13,"expr":14,"GROUP":15,"BY":16,"groupby_list":17,"opt_asc_desc":18,",":19,"ASC":20,"DESC":21,"ORDER":22,"DISTINCT":23,"select_expr":24,"*":25,"opt_as_alias":26,"table_reference":27,"table_factor":28,"join_table":29,"NAME":30,".":31,"table_subquery":32,"opt_as":33,"(":34,")":35,"AS":36,"opt_inner":37,"JOIN":38,"opt_join_condition":39,"left_or_right":40,"opt_outer":41,"join_condition":42,"INNER":43,"OUTER":44,"LEFT":45,"RIGHT":46,"opt_left_or_right_outer":47,"ON":48,"STRING":49,"INTNUM":50,"BOOL":51,"+":52,"-":53,"/":54,"%":55,"ANDOP":56,"OR":57,"COMPARISON":58,"|":59,"&":60,"^":61,"NOT":62,"!":63,"IN":64,"val_list":65,"LIKE":66,"IS":67,"NULLX":68,"$accept":0,"$end":1},
terminals_: {2:"error",4:"SELECT",7:"FROM",12:"SEMICOLON",13:"WHERE",15:"GROUP",16:"BY",19:",",20:"ASC",21:"DESC",22:"ORDER",23:"DISTINCT",25:"*",30:"NAME",31:".",34:"(",35:")",36:"AS",38:"JOIN",43:"INNER",44:"OUTER",45:"LEFT",46:"RIGHT",48:"ON",49:"STRING",50:"INTNUM",51:"BOOL",52:"+",53:"-",54:"/",55:"%",56:"ANDOP",57:"OR",58:"COMPARISON",59:"|",60:"&",61:"^",62:"NOT",63:"!",64:"IN",66:"LIKE",67:"IS",68:"NULLX"},
productions_: [0,[3,9],[9,0],[9,2],[10,0],[10,3],[17,2],[17,4],[18,0],[18,1],[18,1],[11,0],[11,3],[5,0],[5,2],[6,1],[6,3],[6,1],[24,2],[8,1],[8,3],[27,1],[27,1],[28,2],[28,4],[28,3],[28,3],[33,1],[33,0],[26,2],[26,1],[26,0],[29,0],[29,5],[29,4],[29,6],[37,0],[37,1],[41,0],[41,1],[40,1],[40,1],[47,2],[47,2],[47,0],[39,1],[39,0],[42,2],[32,3],[14,1],[14,3],[14,1],[14,1],[14,1],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,5],[14,3],[14,3],[14,3],[14,2],[14,2],[14,5],[14,6],[14,5],[14,6],[14,3],[14,4],[14,3],[14,4],[14,3],[14,4],[65,1],[65,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:$V0},{1:[3]},o($V1,[2,13],{5:3}),{6:4,14:8,23:[1,5],24:6,25:[1,7],30:$V2,49:$V3,50:$V4,51:$V5,62:$V6,63:$V7},{7:[1,15],19:[1,16]},o($V1,[2,14]),o($V8,[2,15]),o($V8,[2,17]),o($V8,$V9,{26:17,25:$Va,30:$Vb,36:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,64:$Vo,66:$Vp,67:$Vq}),o($Vr,[2,49],{31:$Vs}),o($Vr,[2,51]),o($Vr,[2,52]),o($Vr,[2,53]),{14:36,30:$V2,49:$V3,50:$V4,51:$V5,62:$V6,63:$V7},{14:37,30:$V2,49:$V3,50:$V4,51:$V5,62:$V6,63:$V7},o([12,13,15,19,22,38,43,45,46],$Vt,{8:38,27:39,28:40,29:41,32:43,30:$Vu,34:$Vv}),{14:8,24:45,30:$V2,49:$V3,50:$V4,51:$V5,62:$V6,63:$V7},o($V8,[2,18]),{14:46,30:$V2,49:$V3,50:$V4,51:$V5,62:$V6,63:$V7},{14:47,30:$V2,49:$V3,50:$V4,51:$V5,62:$V6,63:$V7},{14:48,30:$V2,49:$V3,50:$V4,51:$V5,62:$V6,63:$V7},{14:49,30:$V2,49:$V3,50:$V4,51:$V5,62:$V6,63:$V7},{14:50,30:$V2,49:$V3,50:$V4,51:$V5,62:$V6,63:$V7},{14:51,30:$V2,49:$V3,50:$V4,51:$V5,62:$V6,63:$V7},{14:52,30:$V2,49:$V3,50:$V4,51:$V5,62:$V6,63:$V7},{14:53,30:$V2,34:[1,54],49:$V3,50:$V4,51:$V5,62:$V6,63:$V7},{14:55,30:$V2,49:$V3,50:$V4,51:$V5,62:$V6,63:$V7},{14:56,30:$V2,49:$V3,50:$V4,51:$V5,62:$V6,63:$V7},{14:57,30:$V2,49:$V3,50:$V4,51:$V5,62:$V6,63:$V7},{34:[1,58]},{64:[1,59],66:[1,60]},{14:61,30:$V2,49:$V3,50:$V4,51:$V5,62:$V6,63:$V7},{51:[1,64],62:[1,63],68:[1,62]},{30:[1,65]},o($Vw,[2,30]),{30:[1,66]},o($Vx,[2,66],{25:$Va,52:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,64:$Vo,66:$Vp,67:$Vq}),o($Vx,[2,67],{25:$Va,52:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,64:$Vo,66:$Vp,67:$Vq}),o($Vy,[2,2],{9:67,13:[1,69],19:$Vz}),o($VA,[2,19],{37:70,40:72,38:$VB,43:$VC,45:$VD,46:$VE}),o($VF,[2,21]),o($VF,[2,22]),o($VG,$V9,{26:76,30:$Vb,31:[1,77],36:$Vc}),{30:[2,28],33:78,36:[1,79]},o([19,35,38,43,45,46],$Vt,{27:39,28:40,29:41,32:43,8:80,3:81,4:$V0,30:$Vu,34:$Vv}),o($V8,[2,16]),o($Vx,[2,54],{25:$Va,52:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,64:$Vo,66:$Vp,67:$Vq}),o($Vx,[2,55],{25:$Va,52:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,64:$Vo,66:$Vp,67:$Vq}),o($Vx,[2,56],{25:$Va,52:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,64:$Vo,66:$Vp,67:$Vq}),o($Vx,[2,57],{25:$Va,52:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,64:$Vo,66:$Vp,67:$Vq}),o($Vx,[2,58],{25:$Va,52:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,64:$Vo,66:$Vp,67:$Vq}),o($Vx,[2,59],{25:$Va,52:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,64:$Vo,66:$Vp,67:$Vq}),o($Vx,[2,60],{25:$Va,52:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,64:$Vo,66:$Vp,67:$Vq}),o($Vx,[2,61],{25:$Va,52:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,64:$Vo,66:$Vp,67:$Vq}),{3:82,4:$V0},o($Vx,[2,63],{25:$Va,52:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,64:$Vo,66:$Vp,67:$Vq}),o($Vx,[2,64],{25:$Va,52:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,64:$Vo,66:$Vp,67:$Vq}),o($Vx,[2,65],{25:$Va,52:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,64:$Vo,66:$Vp,67:$Vq}),{3:84,4:$V0,14:85,30:$V2,49:$V3,50:$V4,51:$V5,62:$V6,63:$V7,65:83},{34:[1,86]},{14:87,30:$V2,49:$V3,50:$V4,51:$V5,62:$V6,63:$V7},o($Vx,[2,72],{25:$Va,52:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,64:$Vo,66:$Vp,67:$Vq}),o($Vr,[2,74]),{51:[1,89],68:[1,88]},o($Vr,[2,76]),o($Vw,[2,29]),o($Vr,[2,50]),o($VH,[2,4],{10:90,15:[1,91]}),o($VF,$Vt,{28:40,29:41,32:43,27:92,30:$Vu,34:$Vv}),{14:93,30:$V2,49:$V3,50:$V4,51:$V5,62:$V6,63:$V7},{38:[1,94]},{28:95,30:$Vu,32:43,34:$Vv},{38:[2,38],41:96,44:[1,97]},{38:[2,37]},o($VI,[2,40]),o($VI,[2,41]),o($VG,[2,23]),{30:[1,98]},{30:[1,99]},{30:[2,27]},{19:$Vz,35:[1,100]},{35:[1,101]},{35:[1,102]},{35:[1,103]},{35:[1,104]},{19:[1,105],25:$Va,35:[2,78],52:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,64:$Vo,66:$Vp,67:$Vq},{3:107,4:$V0,14:85,30:$V2,49:$V3,50:$V4,51:$V5,62:$V6,63:$V7,65:106},o($Vx,[2,73],{25:$Va,52:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,64:$Vo,66:$Vp,67:$Vq}),o($Vr,[2,75]),o($Vr,[2,77]),{11:108,12:[2,11],22:[1,109]},{16:[1,110]},o($VA,[2,20],{37:70,40:72,38:$VB,43:$VC,45:$VD,46:$VE}),o($Vy,[2,3],{25:$Va,52:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,64:$Vo,66:$Vp,67:$Vq}),{28:111,30:$Vu,32:43,34:$Vv},o($VF,$VJ,{39:112,42:113,48:$VK}),{38:[1,115]},{38:[2,39]},o($VG,$V9,{26:116,30:$Vb,36:$Vc}),o($VG,[2,25]),o($VG,[2,26]),o([30,36],[2,48]),o($Vr,[2,62]),o($Vr,[2,68]),o($Vr,[2,70]),{14:85,30:$V2,49:$V3,50:$V4,51:$V5,62:$V6,63:$V7,65:117},{35:[1,118]},{35:[1,119]},{12:[1,120]},{16:[1,121]},{14:123,17:122,30:$V2,49:$V3,50:$V4,51:$V5,62:$V6,63:$V7},o($VF,$VJ,{42:113,39:124,48:$VK}),o($VF,[2,34]),o($VF,[2,45]),{14:125,30:$V2,49:$V3,50:$V4,51:$V5,62:$V6,63:$V7},{28:126,30:$Vu,32:43,34:$Vv},o($VG,[2,24]),{35:[2,79]},o($Vr,[2,69]),o($Vr,[2,71]),o($Vs,[2,1]),{14:123,17:127,30:$V2,49:$V3,50:$V4,51:$V5,62:$V6,63:$V7},o($VH,[2,5],{19:$VL}),o($VM,$VN,{18:129,20:$VO,21:$VP,25:$Va,52:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,64:$Vo,66:$Vp,67:$Vq}),o($VF,[2,33]),o($VF,[2,47],{25:$Va,52:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,64:$Vo,66:$Vp,67:$Vq}),{42:132,48:$VK},{12:[2,12],19:$VL},{14:133,30:$V2,49:$V3,50:$V4,51:$V5,62:$V6,63:$V7},o($VM,[2,6]),o($VM,[2,9]),o($VM,[2,10]),o($VF,[2,35]),o($VM,$VN,{18:134,20:$VO,21:$VP,25:$Va,52:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,62:$Vn,64:$Vo,66:$Vp,67:$Vq}),o($VM,[2,7])],
defaultActions: {73:[2,37],79:[2,27],97:[2,39],117:[2,79]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 4; 
break;
case 1: return 7; 
break;
case 2: return 13; 
break;
case 3: return 38; 
break;
case 4: return 43; 
break;
case 5: return 45; 
break;
case 6: return 46; 
break;
case 7: return 48; 
break;
case 8: return 23; 
break;
case 9: return 20; 
break;
case 10: return 21; 
break;
case 11: return 22; 
break;
case 12: return 15; 
break;
case 13: return 16; 
break;
case 14: return 67; 
break;
case 15: return 66; 
break;
case 16: return 62; 
break;
case 17: return 68; 
break;
case 18: return 57; 
break;
case 19: return 56; 
break;
case 20: return 51; 
break;
case 21: return 51; 
break;
case 22:return 51; 
break;
case 23:return 12; 
break;
case 24: return 50; 
break;
case 25: return 49; 
break;
case 26: return 49; 
break;
case 27: return yy_.yytext[0]; 
break;
case 28: return 56; 
break;
case 29: return 57; 
break;
case 30: return 58; 
break;
case 31: return 58; 
break;
case 32: return 58; 
break;
case 33: return 58; 
break;
case 34: return 58; 
break;
case 35: return 58; 
break;
case 36: return 58; 
break;
case 37: return 58; 
break;
case 38: return 30; 
break;
case 39:
break;
case 40:
break;
case 41:
break;
}
},
rules: [/^(?:SELECT\b)/,/^(?:FROM\b)/,/^(?:WHERE\b)/,/^(?:JOIN\b)/,/^(?:INNER\b)/,/^(?:LEFT\b)/,/^(?:RIGHT\b)/,/^(?:ON\b)/,/^(?:DISTINCT\b)/,/^(?:ASC\b)/,/^(?:DESC\b)/,/^(?:ORDER\b)/,/^(?:GROUP\b)/,/^(?:BY\b)/,/^(?:IS\b)/,/^(?:LIKE\b)/,/^(?:NOT\b)/,/^(?:NULL\b)/,/^(?:OR\b)/,/^(?:AND\b)/,/^(?:TRUE\b)/,/^(?:UNKNOWN\b)/,/^(?:FALSE\b)/,/^(?:;)/,/^(?:-?[0-9]+)/,/^(?:'(\\.|''|[^'\n])*')/,/^(?:"(\\.|""|[^"\n])*")/,/^(?:[-+&~|^\/%*(),.;!])/,/^(?:&&)/,/^(?:\|\|)/,/^(?:=)/,/^(?:<=>)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:!=)/,/^(?:<>)/,/^(?:[A-Za-z][A-Za-z0-9_]*)/,/^(?:[ \t])/,/^(?:\n)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = aug_s15540;
exports.Parser = aug_s15540.Parser;
exports.parse = function () { return aug_s15540.parse.apply(aug_s15540, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}